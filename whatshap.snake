#
# for running whatshap
#----------------------------------------------------------------------
out_dir = 'output/whatshap'

# datasets
datasets = ['ashk', 'sim']
individuals = ['child'] # mother, father, ..
chromosomes = [1, 21]
states = ['full', 'hetero']
coverages = [5, 10, 15] #, 20, 25, 30, 'all']
seeds = [1] # 2, 3, ..
max_covs = [20, 25, 30]
Hs = [15, 20, 25, 30]

# common patterns
vcf_pattern = '{dataset,[a-z]+}.{individual,(mother|father|child)}.chr{chromosome,[0-9]+}.{state,(hetero|full)}'
dataset_pattern = '{dataset,[a-z]+}.{platform,[a-z]+}.{individual,(mother|father|child)}.chr{chromosome,[0-9]+}.{state,(hetero|full)}.cov{coverage,(all|[0-9]+)}'
pattern_ext = '{dataset,[a-z]+}.{platform,[a-z]+}.{individual,(mother|father|child)}.chr{chromosome,[0-9]+}.{state,(hetero|full)}.cov{coverage,(all|[0-9]+)}.shuf{seed,[0-9]+}.max{max,[0-9]+}'

# everything of max coverage 20
slice_one = ['{}.pacbio.{}.chr{}.{}.cov{}.shuf{}.max{}'.format(data, individual, chromosome, state, coverage, seed, max)
	for data in datasets
	for individual in individuals
	for chromosome in chromosomes
	for state in ['hetero']
	for coverage in coverages
	for seed in seeds
	for max in [20]]

# venture into max coverage 25 territory, but only for chr21 and a
# some of the smaller average coverages
slice_two = ['{}.pacbio.{}.chr{}.{}.cov{}.shuf{}.max{}'.format(data, individual, chromosome, state, coverage, seed, max)
        for data in datasets
        for individual in individuals
        for chromosome in [21]
	for state in ['hetero']
	for coverage in [5, 10, 15, 20]
        for seed in seeds
	for max in [25]]

#
# master rule
#----------------------------------------------------------------------
rule master :
	input :
		expand('{dir}/{pattern}.h{h}.diff',
			dir = out_dir.split(),
			h = [15, 20],
			pattern = slice_one),

		expand('{dir}/{pattern}.h{h}.diff',
			dir = out_dir.split(),
			h = [15, 20, 25],
			pattern = slice_two),

#
# run whatshap on an instance
#----------------------------------------------------------------------
rule run_whatshap :
	input :
		vcf = 'vcf/{dataset}.{individual}.chr{chromosome}.unphased.vcf',
		bam = 'bam/' + pattern_ext + '.bam'

	output : '{out_dir}/' + pattern_ext + '.h{H,[0-9]+}.phased.vcf'
	log :
		log = '{out_dir}/' + pattern_ext + '.h{H}.log',
		time = '{out_dir}/' + pattern_ext + '.h{H}.time'

	message : '''

   running whatshap on {input.vcf} / {input.bam} pair,
   cutting coverage down to {wildcards.H} '''

	shell : '''

   /usr/bin/time -v -o {log.time} \
      whatshap phase -o {output} -H {wildcards.H} \
         {input.vcf} {input.bam} > {log.log} 2>&1 '''

#
# compare phased vcfs to true phasing
#----------------------------------------------------------------------
rule compare_vcfs :
	input :
		true = 'vcf/{dataset}.{individual}.chr{chromosome}.phased.vcf',
		vcf = '{out_dir}/' + pattern_ext + '.h{H}.phased.vcf'

	output : '{out_dir}/' + pattern_ext + '.h{H,[0-9]+}.diff'
	message : 'comparing phasing {input.vcf} to true phasing {input.true}'
	shell : 'whatshap compare {input.true} {input.vcf} > {output}'

import os.path

#
# for testing and comparing the new hapcol
#----------------------------------------------------------------------
#
root_dir = '/data/experiments-new-hapcol/'

# utils
pjoin = os.path.join
def base_path(*argv):
        return os.path.join(root_dir, *argv)

# dirs
prog_dir = base_path('programs')
wif_dir = base_path('input_wif')
merged_dir = base_path('merged_wif')
out_dir = base_path('output')

# hapcol
hapcol = pjoin(prog_dir, "increase-k-hapcol", "build", "hapcol")

# datasets
data = ['ashk', 'sim']
individuals = ['child'] # mother, father, ..
chromosomes = [21, 1]
coverages = [5, 10, 15, 20, 25, 30, 'all']
seeds = [1] # 2, 3, .. for downsampling
max_covs = [20, 25, 30]

ea_vals=['05_1', '05_01', '05_001', '05_0001'] 
# "01_1" "01_01" "01_001" "01_0001" "1_1" "1_01" "1_001" "1_0001")

# everything of max coverage 20
slice_one = ['{}.pacbio.{}.chr{}.cov{}.shuf{}.max{}'.format(data, individual, chromosome, coverage, seed, max)
	for data in data
	for individual in individuals
	for chromosome in chromosomes
        for coverage in coverages
	for seed in seeds
	for max in [20]]

# venture into max coverage 25 territory, but only for chr21 and a
# some of the smaller average coverages
slice_two = ['{}.pacbio.{}.chr{}.cov{}.shuf{}.max{}'.format(data, individual, chromosome, coverage, seed, max)
	for data in data
	for individual in individuals
	for chromosome in [21]
        for coverage in [5, 10, 15, 20]
	for seed in seeds
        for max in [25]]

#
# master rule
#----------------------------------------------------------------------
rule all :
	input :
		expand('inck/{pattern}.{ea}.out_hc',
			pattern = slice_one + slice_two,
			ea = ea_vals),
		expand('inck-merged/{pattern}.merged.{ea}.out_hc',
			pattern = slice_one + slice_two,
			ea = ea_vals)

#
# run increase-k hapcol
#----------------------------------------------------------------------
rule inck_hapcol:
	input:
		wif_file = pjoin(wif_dir, '{paths}.shuf{seed}.max{max}.wif')
	output:
		'inck/{paths}.shuf{seed}.max{max}.{ea}.out_hc'
	threads:
		1
	params:
		e = lambda wildcards : '0.' + str(wildcards.ea).split('_')[0],
		a = lambda wildcards : '0.' + str(wildcards.ea).split('_')[1]
	log:
		pjoin(out_dir, 'inck', '{paths}.shuf{seed}.max{max}.{ea}.log_hc')
	shell:
                "/usr/bin/time -v " +
		hapcol + " " +
		"-i {input.wif_file} " +
		"-o {output} " +
		"-e {params.e} " +
		"-a {params.a} " +
		"-A " +
		"&> {log}"

rule inck_hapcol_merged:
	input:
		wif_file = pjoin(merged_dir, '{paths}.shuf{seed}.max{max}.merged.wif')
	output:
		'inck-merged/{paths}.shuf{seed}.max{max}.merged.{ea}.out_hc'
	threads:
		1
	params:
		e = lambda wildcards : '0.' + str(wildcards.ea).split('_')[0],
		a = lambda wildcards : '0.' + str(wildcards.ea).split('_')[1]
	log:
		pjoin(out_dir, 'inck-merged', '{paths}.shuf{seed}.max{max}.merged.{ea}.log_hc')
	shell:
                "/usr/bin/time -v " +
		hapcol + " " +
		"-i {input.wif_file} " +
		"-o {output} " +
		"-e {params.e} " +
		"-a {params.a} " +
		"-A " +
		"&> {log}"
